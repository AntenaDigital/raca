#
# Publish package raca.client 27-01-2015 17:58
#

@class RACA ATTENDEE
package raca.client;

import java.net.MalformedURLException;
import java.util.List;

public abstract class RacaAttendee {

	private String clientID_;	
	private String colorPaint_;
	
	private RacaNetworkProxy proxy_ = null;	
	
	private boolean flagOnline_ = false;
	
	private List<String> idSessions;	
	
	public List<String> getIdSessions() {
		return idSessions;
	}

	public boolean isFlagOnline() {
		return flagOnline_;
	}

	public void setFlagOnline(boolean flagOnline) {
		this.flagOnline_ = flagOnline;
	}

	public String getClientID() {
		return clientID_;
	}	
	
	public String getColorPaint_() {
		return colorPaint_;
	}

	public void setColorPaint_(String colorPaint_) {
		this.colorPaint_ = colorPaint_;
	}

	public RacaNetworkProxy getProxy_() {
		return proxy_;
	}
	
	
	public RacaAttendee(String clientID, String colorPaint){
		
		this.clientID_ = clientID;
		this.colorPaint_ = colorPaint;
		
		proxy_ = new RacaNetworkProxy(this);
	}
	
	public abstract void joinSession(String sessionID) throws MalformedURLException;
	
	public abstract void quitSession();
}


@class RACA MASTER ATTENDEE
package raca.client;

import java.net.MalformedURLException;

public class MasterAttendee extends RacaAttendee{	

	private RacaNetworkProxy proxy_ = null;	
	
	public MasterAttendee(String clientID, String colorPaint) {
		
		super(clientID, colorPaint);		
	}

	public void joinSession(String sessionID) throws MalformedURLException {
		
		proxy_.subsMasterAck(sessionID, getClientID());
		proxy_.sendMasterRequest(sessionID);			
		
	}

	@Override
	public void quitSession() {
		
		isFlagOnline();
	}    
	
}


@class RACA  PUPIL ATTENDEE
package raca.client;

public class PupilAttendee extends RacaAttendee{

	private RacaNetworkProxy proxy_ = null; 
	
	public PupilAttendee(String clientID, String colorPaint) {
		super(clientID, colorPaint);
		super.setColorPaint_(colorPaint);
	}
	
	@Override
	public void joinSession(String sessionID) {
		
		proxy_.subsSlaveAck(sessionID, getClientID());		
		proxy_.sendSlaveRequest(sessionID);
	}

	@Override
	public void quitSession() {	
		
		isFlagOnline();
	}
}


@class RACA NETWORK PROXY
package raca.client;

import raca.util.client.RacaStringUtil;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;


public class RacaNetworkProxy {

	/*** 
	 * 			DECLARATION OF VARIABLE 
	 ***/	
	
	private boolean isMaster_;

	public static boolean NO_BUS_CONTROL_ = false;
	
	private String aspect_;

	
	public static String SERVERNAME = new String("147.65.7.10");
	public static String QUEUE_NAME = "QUEUE_NAME";
	public static String TOPIC_NAME = "TOPIC_NAME";

	/*
	 * MASTER and PUPIL command publishing TOPIC
	 */
	public static String MASTER_COMMAND_TOPIC_NAME = new String(
			"jms/topic/RACA_MASTER_COMMAND_TOPIC_");

	public static String PUPIL_COMMAND_TOPIC_NAME = new String(
			"jms/topic/RACA_PUPIL_COMMAND_TOPIC_");

	/*
	 * MASTER listening on SLAVE REQ QUEUE and publishing on SLAVE ACK
	 */
	public static String SLAVE_REQ_QUEUE_NAME = new String(
			"jms/queue/RACA_SLAVE_REQ_QUEUE_");

	public static String MASTER_REQ_TOPIC_NAME = new String(
			"jms/topic/RACA_MASTER_REQ_TOPIC_");

	/*
	 * MASTER ACKNOWLEDGE
	 */

	public static String MASTER_ACK_TOPIC_NAME = new String(
			"jms/topic/RACA_MASTER_ACK_TOPIC_");

	public static String MASTER_QUEUE_NAME = new String(
			"jms/queue/RACA_MASTER_QUEUE_");

	public static String SLAVE_ACK_TOPIC_NAME = new String(
			"jms/topic/RACA_SLAVE_ACK_TOPIC_");	

	/*
	 * CONTROL MESSAGES
	 */
	public static String MASTER_REQUEST_LOG_MSG = new String("MASTER_REQUEST");

	public static String MASTER_ACK_LOG_MSG = new String("MASTER_ACK");

	public static String SLAVE_REQ_LOG_MSG = new String("SLAVE_REQ");

	public static String SLAVE_ACK_LOG_MSG = new String("SLAVE_ACK");

	public static String NULL_MSG = new String("");

	public static String COMMAND_PREFIX = new String("<COMMAND");

	/*
	 * CLIENT/SERVER CONTROL MESSAGES
	 */
	public static String MEDIATORPROXY_REQ_ID_TAG = "REQ_ID";

	public static String MEDIATORPROXY_COMMAND_TAG = "RPN_COMMAND";

	public static String MEDIATORPROXY_CLIENT_ID_TAG = "CLIENT_ID";

	public static String MEDIATORPROXY_SESSION_ID_TAG = "SESSION_ID";


	public static String MEDIATORPROXY_MASTER_UPDATE_TAG = "MASTER_UPDATE";

	public static String MEDIATORPROXY_MASTER_CHECK_TAG = "MASTER_CHECK";

	public static String MEDIATORPROXY_MASTER_RESET_TAG = "MASTER_RESET";

	public static String MEDIATORPROXY_POLL_TAG = "POLL";

	public static String MEDIATORPROXY_NOTEBOARD_POLL_TAG = "OBJ_POLL";


	public static String MEDIATORPROXY_SEND_TAG = "SEND";
	public static String MEDIATORPROXY_PUBLISH_TAG = "PUB";

	public static String MEDIATORPROXY_LISTENING_NAME_TAG = "LISTENING_NAME";

	public static String MEDIATORPROXY_LISTENING_TAG = "SUBSREC";

	public static String MEDIATORPROXY_LOG_MSG_TAG = "LOG_MSG";


	public static String MEDIATORPROXY_URL = "http://" + SERVERNAME
			+ ":8080/racamediatorproxy/";

	public static String ACTIVATED_FRAME_TITLE = "NO_TITLE";

	/*
	 * TODO - lista as possiveis sessoes ja existentes
	 */
	public static List<String> listCurrentSessions() {
		
		return new ArrayList<String>();
	}

	
	/*
	 * TODO - cria uma nova sessao
	 */
	public static String startNewSession() {
		
		return "NEW SESSION ID";
	}
	
	/*** 
	 * 			REFERENCE OF CLASS 
	 ***/	

	// listens to the slave request queue (MASTER)
	
	private RacaSubscriberThread slaveReqSubscribeThread_ = null;

	// subscription to RACA COMMANDs topic (SLAVE)
	private RacaSubscriberThread commandSubscriberThread_ = null;

	// subscription for an acknowledge given to a SLAVE to join the session
	// (ALL)
	private RacaSubscriberThread slaveAckSubscriberThread_ = null;

	// subscription to MASTER request
	private RacaSubscriberThread masterReqSubscriberThread_ = null;

	// subscription to MASTER acknowledge (SLAVE)
	private RacaSubscriberThread masterAckSubscriberThread_ = null;

	// publisher for RACA COMMAND (MASTER)
	private RacaHttpPublisher commandPublisher_ = null;

	// publisher for MASTER request
	private RacaHttpPublisher masterRequestPublisher_ = null;

	// queues up a slave request (SLAVE)
	private RacaHttpSender slaveRequestSender_ = null;


	private RacaHttpSender masterSender_ = null;

	//private RacaResetableListener masterCheckConsumer_ = null;
	
	private RacaMessageListener masterCheckConsumer_ = null;

	//private RacaResetableListener masterResetConsumer_ = null;	
	
	private RacaMessageListener masterResetConsumer_ = null;
	
	private RacaAttendee attendee_ = null;
	
	/*** 
	 * 			METHODS 
	 ***/	

	private String getClientID() {
		return attendee_.getClientID();
	}
	
	private boolean isOnline() {
		return attendee_.isFlagOnline();
	}

	
	public RacaNetworkProxy(RacaAttendee attendee) {		
		
		this.attendee_ = attendee;
			
	}

	public void log() {}

	public void log(String logMessage) {
		
	}
	
	// 		envia pedido para se tornar MASTER
	public void sendMasterRequest(String sessionID) {

		// 		checa para ver se ja existe um MASTER
		boolean gotMaster = checkMasterQueue(sessionID, attendee_.getClientID());

		if (!gotMaster) {

			// I AM THE MASTER NOW FOR SESSION ID...
			ackMasterRequest(attendee_.getClientID(), sessionID);

		} else {

			// THERE IS A MASTER...SO ASK FOR THE LOCK...
			if (masterRequestPublisher_ == null)
				masterRequestPublisher_ = new RacaHttpPublisher(MASTER_REQ_TOPIC_NAME + sessionID, sessionID);

			masterRequestPublisher_.publish(MASTER_REQUEST_LOG_MSG + '|'+ attendee_.getClientID(), attendee_.getClientID());

			log(attendee_.getClientID() + " has requested MASTER lock for SESSION with ID : "	+ sessionID + '\n');

		}

	}
	
	public void sendSlaveRequest(String sessionID) {

		/**
		 * REQUESTS TO BECOME A SLAVE
		 * getsSmart! 
		 */

		if (slaveRequestSender_ == null)
			slaveRequestSender_ = new RacaHttpSender(SLAVE_REQ_QUEUE_NAME + sessionID, sessionID);

		if (!NO_BUS_CONTROL_) {

			slaveRequestSender_.send(SLAVE_REQ_LOG_MSG + '|' + attendee_.getClientID(), attendee_.getClientID());

		} else {	

			// the slave request is always accepted...
			RacaHttpPublisher publisher = new RacaHttpPublisher(SLAVE_ACK_TOPIC_NAME + sessionID, sessionID);
			
			publisher.publish(SLAVE_ACK_LOG_MSG + '|' + attendee_.getClientID());
			publisher.close();
		}

	}

	public void ackMasterRequest(String clientID,String sessionID) {

		if (clientID.compareTo(attendee_.getClientID()) == 0 && !sessionID.equals("")) {
			
			// TODO : this should be a reconnect !
			if (isOnline() && !NO_BUS_CONTROL_) {

				// leaves the session as SLAVE
				// disconnect();
				subsMasterAck(sessionID, clientID);
				subsSlaveAck(sessionID, clientID);
			}

			// and now BECOMES MASTER
			log("You are now being configured as MASTER for SESSION with ID : "+ sessionID + '\n');
			RacaNetworkDialog.instance().setTitle(RacaNetworkDialog.TITLE + "MASTER");

			/*
			 * RACA COMMAND PUBLISH FOR MASTER
			 */
			if (commandPublisher_ == null)
				commandPublisher_ = new RacaHttpPublisher(MASTER_COMMAND_TOPIC_NAME + sessionID, sessionID);

			// MASTER SUBS to PUPIL COMMAND TOPIC (specific to old_MKP)
			if (commandSubscriberThread_ == null)
				commandSubscriberThread_ = new RacaSubscriberThread(PUPIL_COMMAND_TOPIC_NAME + sessionID, sessionID, clientID); //------

			commandSubscriberThread_.start();

			/*
			 * SLAVE REQ RECEIVE
			 * mudanca na referencia
			 */

			if (slaveReqSubscribeThread_ == null) {
				slaveReqSubscribeThread_ = new RacaSubscriberThread(SLAVE_REQ_QUEUE_NAME + sessionID, sessionID, clientID);
				slaveReqSubscribeThread_.start();
			}

			/*
			 * MASTER REQ SUBS
			 */
			if (masterReqSubscriberThread_ == null) {
				masterReqSubscriberThread_ = new RacaSubscriberThread(
						MASTER_REQ_TOPIC_NAME + sessionID, sessionID, clientID);

				// SETs THE MASTER_QUEUE EMPTY
				masterReqSubscriberThread_.start();			

			resetMasterQueue(sessionID, clientID);
			updateMasterQueue(clientID, sessionID);

			attendee_.setFlagOnline(true);

			} else
				log(clientID + " has being acknowledged as MASTER for SESSION with ID : "+ sessionID + '\n');
		}

	}

	public void ackSlaveRequest(String clientID, String master_aspect, String sessionID, String colorPaint) {

		log(clientID + " has being acknowledged as SLAVE of RACASESSION with ID : " + sessionID + '\n');

		if (clientID.compareTo(attendee_.getClientID()) == 0) {

			/*
			 * RACA COMMAND PUBLISH
			 */        	
			if (commandPublisher_ == null)
				commandPublisher_ = new RacaHttpPublisher(PUPIL_COMMAND_TOPIC_NAME + sessionID, sessionID);

			/* 
			 * SLAVE SUBS to RACA COMMAND TOPIC
			 */            
			if (commandSubscriberThread_ == null)
				commandSubscriberThread_ = new RacaSubscriberThread(MASTER_COMMAND_TOPIC_NAME + sessionID, sessionID, clientID);

			commandSubscriberThread_.start();

			log("You are now following RACASESSION with ID : " + sessionID + '\n');

			RacaNetworkDialog.instance().setTitle(RacaNetworkDialog.TITLE + "PUPIL");

			if (aspect_.compareTo(master_aspect) != 0)
				JOptionPane.showMessageDialog(null,
						"Please adjust your aspect ratio to " + master_aspect, "Aspect Warning", JOptionPane.WARNING_MESSAGE);

			//RacaCommandModule.setPupilColor(pupilColor);
			attendee_.setColorPaint_(colorPaint);
		}

	}

	public void subsMasterAck(String sessionID, String clientID) {

		if (masterAckSubscriberThread_ == null)
			masterAckSubscriberThread_ = new RacaSubscriberThread(MASTER_ACK_TOPIC_NAME + sessionID, sessionID, clientID);

		masterAckSubscriberThread_.start();

		log("Will be listening to MASTER ACK now...");

	}

	public void subsSlaveAck(String sessionID, String clientID) {

		if (slaveAckSubscriberThread_ == null)
			slaveAckSubscriberThread_ = new RacaSubscriberThread(SLAVE_ACK_TOPIC_NAME + sessionID, sessionID, clientID);

		slaveAckSubscriberThread_.start();
		Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.INFO,"Will be listening to SLAVE ACK now...");

	}

	public void updateMasterQueue(String clientID, String sessionID) {

		/** UPDATES THE MASTER_QUEUE STATUS */		

			// FILLs UP THE MASTER_QUEUE with proper CONTROL MSGs
			if (masterSender_ == null) {
				masterSender_ = new RacaHttpSender(MASTER_QUEUE_NAME + sessionID, sessionID);
			}

			// CHECK IF FIFO really ??
			masterSender_.send(MASTER_ACK_LOG_MSG + '|' + attendee_.getClientID(), attendee_.getClientID());

			try {

				log("Will now hit RACA Mediator URL..." + '\n');

				URL racaMediatorURL = new URL(MEDIATORPROXY_URL	+ "racamasterqueueproxy" + "?"+ MEDIATORPROXY_REQ_ID_TAG + '='
						+ MEDIATORPROXY_MASTER_UPDATE_TAG + "&"	+ MEDIATORPROXY_CLIENT_ID_TAG
						+ '=' + clientID);

				URLConnection racaMediatorConn = racaMediatorURL.openConnection();
				
				BufferedReader buffReader = new BufferedReader(new InputStreamReader(racaMediatorConn.getInputStream()));

				/*
				StringBuffer fullText = new StringBuffer();
				Boolean buffFlag = false;*/
				
				String text = new String();
				while ((text = buffReader.readLine()) != null) {

				}

			}catch (Exception exc) {
				exc.printStackTrace();
			}
	}

	public void resetMasterQueue(String sessionID, String clientID) {

		/** RESETs THE MASTER_QUEUE STATUS // NON PERSISTENT */

		if (masterResetConsumer_ == null){

			log("WARN : a Http Polling context will be started...");

			try {

				/*masterResetConsumer_ = new RacaHttpPoller(new RacaConsumer(MASTER_QUEUE_NAME + sessionID,false,false),
						RacaHttpPoller.buildHitURL(MASTER_QUEUE_NAME + sessionID, sessionID));*/
				
				masterResetConsumer_ = new RacaHttpPoller(new RacaSubscriberParser(),
									RacaHttpPoller.buildSubscribeHitURL(MASTER_QUEUE_NAME + sessionID, sessionID), sessionID, clientID);
      

			} catch (MalformedURLException e) {

				e.printStackTrace();
				log("message erro...: "+ e.getMessage());
			}

		} else
			
			//masterResetConsumer_ = new RacaConsumer(MASTER_QUEUE_NAME + sessionID);
			// resets and releases the MASTER_QUEUE for others to listen to...		
			//masterResetConsumer_.reset();     

		masterResetConsumer_.stopsListening();
		
		masterResetConsumer_ = null;
		
		log("MASTER QUEUE has being reset...");

	}

	public boolean checkMasterQueue(String sessionID, String clientID){
		
		/**
		 * REQUESTS TO BECOME MASTER 
		 * WILL BE A QUICK ACCESS METHOD TO THE
		 * MASTER_QUEUE
		 */

		boolean gotMaster = false;

		if (masterCheckConsumer_ == null) {

				log("WARN : a Http Polling context will be started...");
				
				try {
					
					/*masterCheckConsumer_ = new RacaHttpTxtPoller(new RacaConsumer(MASTER_QUEUE_NAME + sessionID, false, false),
							RacaHttpPoller.buildHitURL(MASTER_QUEUE_NAME + sessionID, sessionID));*/
				
					masterCheckConsumer_ = new RacaHttpPoller(new RacaSubscriberParser(),
							RacaHttpPoller.buildSubscribeHitURL(MASTER_QUEUE_NAME + sessionID, sessionID), sessionID, clientID);

					
					
				} catch (MalformedURLException e) {				
					e.printStackTrace();
					log("message err... "+ e.getMessage());
				}
				

			} else
				// PERSISTENT !
				//masterCheckConsumer_ = new RacaConsumer(MASTER_QUEUE_NAME + sessionID, true, false);

				//gotMaster = masterCheckConsumer_.check();

		// releases the MASTER_QUEUE for others to listen to...
		masterCheckConsumer_.stopsListening();
		masterCheckConsumer_ = null;

		log("CHECK MASTER QUEUE has returned : " + gotMaster + " for RACASESSION with ID : " + sessionID + '\n');

		return gotMaster;

	}

	public void sendCommand(String commandDesc) {

		commandPublisher_.publish(RacaStringUtil.trimURL(commandDesc));

		Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.INFO,"Command successfully published was : " + commandDesc);

		log("COMMAND EXECUTED : = "+ RacaStringUtil.extractCommandName(commandDesc));
	}

	public void sendCommand(Object obj) {

		commandPublisher_.publish(obj);

		Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.INFO, "Object successfully published ! ");

	}
}

@class RACA HTTP PUBLISH
package raca.client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

public class RacaHttpPublisher {

	private String hitURL_ = null;
    private String topicName_ = null;	
	private String sessionID_;
    
	public RacaHttpPublisher(){	}	
	
	public RacaHttpPublisher(String topicName, String sessionID){		
		
		sessionID_ = sessionID;		
		topicName_ = topicName.toString();
		
        try {
			
        	hitURL_ = RacaHttpPoller.builCommanddHitURL("PUBLISH",topicName_.toString(), sessionID_);
		
        } catch (MalformedURLException e) {
			
			e.printStackTrace();
			System.err.println("message :" + e.getMessage());
		}

	}
	
	public void publish(String msg, String clientID) {
		
		String fullURL = new String(hitURL_ + "?" + RacaNetworkProxy.MEDIATORPROXY_REQ_ID_TAG + '='+ RacaNetworkProxy.MEDIATORPROXY_PUBLISH_TAG
                + '&' + RacaNetworkProxy.TOPIC_NAME + '=' + topicName_ + '&' + RacaNetworkProxy.MEDIATORPROXY_CLIENT_ID_TAG + '=' + clientID.toString()
                + '&' + RacaNetworkProxy.MEDIATORPROXY_LOG_MSG_TAG + '=' + msg.toString());

		System.out.println("The URL message to be published is : " + fullURL);
				
		/**
		 * getsSmart!
		 */
				URL racaMediatorURL = null;
				URLConnection racaMediatorConn = null;
				
				try {					
					
					racaMediatorURL = new URL(fullURL);					
					racaMediatorConn = racaMediatorURL.openConnection();					
					BufferedReader buffReader = new BufferedReader(new InputStreamReader(racaMediatorConn.getInputStream()));					
					String text = new String();
					
					/*StringBuffer fullText = new StringBuffer();
					Boolean buffFlag = false;*/
					
					while ((text = buffReader.readLine()) != null) {}			
					
				} catch (MalformedURLException e) {					
					e.printStackTrace();
					System.err.print("message : " + e.getMessage());
					
				} catch (IOException e) {					
					e.printStackTrace();
					System.err.print("message : " + e.getMessage());
					
				}		
	}
	
	public void publish(Object obj) {
	
		try {         

            System.out.println("Will now publish object for URL : " + hitURL_);
            
            URL url = new URL(hitURL_);
            HttpURLConnection urlCon = (HttpURLConnection)url.openConnection();

            urlCon.setRequestProperty("Content-Type", "application/octet-stream");
            urlCon.setDoOutput(true); // to be able to write.
            urlCon.setDoInput(true); // to be able to read.

            ObjectOutputStream out =  new ObjectOutputStream(urlCon.getOutputStream());

            // we might need a ... out.writeObject(new String("topicName"));
            out.writeObject(obj);
            out.flush();
            out.close();

            int result = urlCon.getResponseCode();
    
		} catch (Exception exc) {        
			exc.printStackTrace();    
		}		
	}	
	
	public void close(){
		
	}	
}


@class RACA HTTP POLLER
package raca.client;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;


public class RacaHttpPoller implements RacaMessageListener{

	public static int OBJ_POLLER = 1;
	public static volatile int POLLING_MODE = OBJ_POLLER;

	private RacaNetworkProxy proxy = null;
	private RacaMessageParse parser_ = null;
	private String clientID_ = null;
	private String sessionID_ = null;
	
	private String hitURL_ = null;
	private boolean end_ = false;

	public RacaHttpPoller(RacaMessageParse parser, String hitURL, String sessionID, String clientID){

		parser_ = parser;
		hitURL_ = hitURL.toString();
		clientID_ = clientID.toString();
		sessionID_ = sessionID.toString();
	}

	public static String buildSubscribeHitURL(String hitTarget, String sessionID) throws MalformedURLException{

		if (hitTarget.startsWith(RacaNetworkProxy.MASTER_COMMAND_TOPIC_NAME + sessionID)) {

			return RacaNetworkProxy.MEDIATORPROXY_URL + "racamastercommandproxy";


		} else if (hitTarget.startsWith(RacaNetworkProxy.PUPIL_COMMAND_TOPIC_NAME + sessionID)) {

			return RacaNetworkProxy.MEDIATORPROXY_URL + "racapupilcommandproxy";


		} else if (hitTarget.startsWith(RacaNetworkProxy.MASTER_ACK_TOPIC_NAME + sessionID)) {

			return RacaNetworkProxy.MEDIATORPROXY_URL + "racamasterackproxy";


		} else if (hitTarget.startsWith(RacaNetworkProxy.MASTER_REQ_TOPIC_NAME + sessionID)) {

			return RacaNetworkProxy.MEDIATORPROXY_URL + "racamasterreqproxy";


		} else if (hitTarget.startsWith(RacaNetworkProxy.SLAVE_ACK_TOPIC_NAME + sessionID)) {

			return RacaNetworkProxy.MEDIATORPROXY_URL + "racaslaveackproxy";


		} else if (hitTarget.startsWith(RacaNetworkProxy.SLAVE_REQ_QUEUE_NAME + sessionID)) {

			return RacaNetworkProxy.MEDIATORPROXY_URL + "racaslavereqproxy";


		} else if (hitTarget.startsWith(RacaNetworkProxy.MASTER_QUEUE_NAME + sessionID)) {

			return RacaNetworkProxy.MEDIATORPROXY_URL + "racamasterqueueproxy";


		} else throw new java.net.MalformedURLException();

	}

	public static String builCommanddHitURL(String mode, String hitTarget, String sessionID) throws MalformedURLException{

		if (mode.startsWith("SEND"))
			return RacaNetworkProxy.MEDIATORPROXY_URL + "racasendproxy";

		
		else if (mode.startsWith("PUBLISH")) {
			
			String urlFlag = "";

			if (hitTarget.startsWith(RacaNetworkProxy.MASTER_COMMAND_TOPIC_NAME + sessionID))


				urlFlag = "racamasterpublishproxy";

			else
				urlFlag = "racapupilpublishproxy";
		
			return RacaNetworkProxy.MEDIATORPROXY_URL + urlFlag;
		}

		else throw new java.net.MalformedURLException();
		    
	}
	
	@Override	
	public void startsListening() {

		try {
			while (!end_) {

				String objCommandURL = new String(hitURL_ + "?" + RacaNetworkProxy.MEDIATORPROXY_REQ_ID_TAG + '=' +
						RacaNetworkProxy.MEDIATORPROXY_NOTEBOARD_POLL_TAG + '&' +
						RacaNetworkProxy.MEDIATORPROXY_CLIENT_ID_TAG + '=' + clientID_);

				URL racaMediatorURL;

				racaMediatorURL = new URL(objCommandURL);


				URLConnection racaMediatorConn = racaMediatorURL.openConnection();			

				ObjectInputStream in = new ObjectInputStream(racaMediatorConn.getInputStream());
				
				if(in.equals(null)){
				
					/**
					 * Desviar o fluxo aqui... 
					 * pois a EXCEPTION só será disparada quando
					 * tentar consumir o objeto vazio!!
					 */
				
				}else{
					
					parser_.parse(in.readObject());
					
				}
			}

		} catch (MalformedURLException e) {
			e.printStackTrace();
			System.err.println("exception URL" + e.getMessage());

		} catch (IOException e) {			
			e.printStackTrace();
			System.err.println("exception URLConnection" + e.getMessage());

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			System.err.println("exception readObject" + e.getMessage());
		}

	}
	
	@Override
	public void stopsListening() {
		end_ = true;
	}
}


@class RACA HTTP SENDER
package raca.client;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

public class RacaHttpSender {
	
	private String hitURL_ = null;
    private String queueName_ = null;

    public RacaHttpSender(String queueName, String sessionID) {

        queueName_ = queueName.toString();
		
        try {
			
        	hitURL_ = RacaHttpPoller.builCommanddHitURL("SEND", queueName_, sessionID.toString());
		
        } catch (MalformedURLException e) {
        	
			e.printStackTrace();
			System.err.println("message...:" + e.getMessage());
		}
    
    }

    public void send(String msg, String clientID) {
    	
    	try {           

    		String fullURL = new String(hitURL_ + "?" + RacaNetworkProxy.MEDIATORPROXY_REQ_ID_TAG + '='
    				+ RacaNetworkProxy.MEDIATORPROXY_SEND_TAG 
    				+ '&' + RacaNetworkProxy.QUEUE_NAME + '=' + queueName_
    				+ '&' + RacaNetworkProxy.MEDIATORPROXY_CLIENT_ID_TAG + '=' + clientID.toString()
    				+ '&' + RacaNetworkProxy.MEDIATORPROXY_LOG_MSG_TAG + '=' + msg.toString());

    		System.out.println("The URL message to be sent is : " + fullURL);

    		URL racaMediatorURL = new URL(fullURL);

    		/**
    		 * Will now connect to Mediator with URL...
    		 * getsSmart!
    		 */
    		
    		URLConnection racaMediatorConn = racaMediatorURL.openConnection();
    		BufferedReader buffReader = new BufferedReader(new InputStreamReader(racaMediatorConn.getInputStream()));
    		
    		String text;
    		/*
    		StringBuffer fullText = new StringBuffer();
    		Boolean buffFlag = false;*/

    		while ((text = buffReader.readLine()) != null) {

    		}

    	} catch (Exception exc) {

    		exc.printStackTrace();

    	}    	
    }		
}


@class RACA SUBSCRIBER THREAD
package raca.client;

public class RacaSubscriberThread extends Thread{

	private RacaMessageListener subscriber_ = null;
	
	public RacaSubscriberThread(String topicName, String sessionID, String clientID){

		try {
			System.out.println("WARN : a Http Polling context will be started...");            

			subscriber_ = new RacaHttpPoller(new RacaSubscriberParser(),
											 RacaHttpPoller.buildSubscribeHitURL(topicName, sessionID),
											 sessionID, clientID);       

		} catch (java.net.MalformedURLException ex) {

			ex.printStackTrace();
		}
	}	

	public void run() {

		if (subscriber_ != null)
			subscriber_.startsListening();
	}

	public void unsubscribe() {

		if (subscriber_ != null)
			subscriber_.stopsListening();
	}
}


@class RACA SUBSCRIBER PARSER
package raca.client;

import java.util.logging.Level;
import java.util.logging.Logger;

import org.xml.sax.SAXException;
import org.xml.sax.helpers.XMLReaderFactory;


public class RacaSubscriberParser implements RacaMessageParse { 

	protected boolean end_ = false;
	
	
	public void parse(Object obj) {

		Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.INFO, "Object message received !");

		// TODO > NOTEBOARD NULL OBJECT
		if (obj instanceof String) {

			/*
			 * try {
                // COMMAND MESSAGES PARSING

            	mkp.MKPCommandModule.init(XMLReaderFactory.createXMLReader(), new StringBufferInputStream((String) obj));

            } catch (SAXException ex) {

            	Logger.getLogger(RacaSubscriberParser.class.getName()).log(Level.SEVERE, null, ex);
            }
			 
			 */            
		}

		else if (obj instanceof Object /*SerializablePathIterator*/ ) { 

			try {

				Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.INFO, "This is a PATH obj... !");

				if (obj == null) 
					System.out.println("and it is null...");

				//SerializablePathIterator it = (SerializablePathIterator) obj;
				//MKPGlassFrame.instance().execDrawCommand(it);

			} catch (Exception e) {

				e.printStackTrace();
			}            
		}

		else {

			try {

				Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.INFO, "This is an IMAGE obj... !");

				//SerializableBufferedImage bi = (SerializableBufferedImage) obj;
				//MKPGlassFrame.instance().execSetPadBackgroundCommand(bi);               

			} catch (Exception e) {

				e.printStackTrace();
			}

		}

	}
}


@class RACA RESETABLE LISTENER
package raca.client;

public interface RacaResetableListener extends RacaMessageListener{

	void reset();
  boolean check();
}


@class RACA NETWORK DIALOG
package raca.client;

import javax.swing.JDialog;

public class RacaNetworkDialog extends JDialog { //COMENTAR O *implements PropertyChangeListener*
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private static RacaNetworkDialog instance_= null;
	public static String TITLE = "RACA Network Control - ";
	
	public static RacaNetworkDialog instance(){
		
		if(instance_ == null){
			instance_ = new RacaNetworkDialog();
		}
		
		return instance_;
	}
}


@class RACA MESSAGE PARSE
package raca.client;

public interface RacaMessageParse {

	void parse(Object obj);

}

@class RACA MESSAGE LISTENER
package raca.client;

public interface RacaMessageListener {

	//String listeningName();
	
    void startsListening();
    void stopsListening();
}
