#####
RACA_NETWORK_PROXY
#####
package raca.client;

import raca.util.client.RacaStringUtil;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;


public class RacaNetworkProxy {

	private boolean isMaster_;
	private boolean isOnline_;
	public static boolean NO_BUS_CONTROL_ = false;
	private boolean isFirewalled_ = false;
	public String clientID_ = "";
	private String aspect_;
	
	public static String SERVERNAME = new String("147.65.7.10");
	public static String QUEUE_NAME = "QUEUE_NAME";
	public static String TOPIC_NAME = "TOPIC_NAME";

	/*
	 * MASTER command publishing TOPIC
	 */
	public static String MASTER_COMMAND_TOPIC_NAME = new String(
			"jms/topic/RACA_MASTER_COMMAND_TOPIC_1234");
	public static String PUPIL_COMMAND_TOPIC_NAME = new String(
			"jms/topic/RACA_PUPIL_COMMAND_TOPIC_1234");

	/*
	 * MASTER listening on SLAVE REQ QUEUE and publishing on SLAVE ACK
	 */
	public static String SLAVE_REQ_QUEUE_NAME = new String(
			"jms/queue/RACA_SLAVE_REQ_QUEUE_1234");
	public static String MASTER_REQ_TOPIC_NAME = new String(
			"jms/topic/RACA_MASTER_REQ_TOPIC_1234");

	/*
	 * MASTER ACKNOWLEDGE
	 */
	public static String MASTER_QUEUE_NAME = new String(
			"jms/queue/RACA_MASTER_QUEUE_1234");
	public static String SLAVE_ACK_TOPIC_NAME = new String(
			"jms/topic/RACA_SLAVE_ACK_TOPIC_1234");
	public static String MASTER_ACK_TOPIC_NAME = new String(
			"jms/topic/RACA_MASTER_ACK_TOPIC_1234");

	/*
	 * CONTROL MESSAGES
	 */
	public static String MASTER_REQUEST_LOG_MSG = new String("MASTER_REQUEST");
	public static String MASTER_ACK_LOG_MSG = new String("MASTER_ACK");
	public static String SLAVE_REQ_LOG_MSG = new String("SLAVE_REQ");
	public static String SLAVE_ACK_LOG_MSG = new String("SLAVE_ACK");
	public static String NULL_MSG = new String("");
	public static String COMMAND_PREFIX = new String("<COMMAND");

	/*
	 * CLIENT/SERVER CONTROL MESSAGES
	 */
	public static String MEDIATORPROXY_REQ_ID_TAG = "REQ_ID";
	public static String MEDIATORPROXY_COMMAND_TAG = "RPN_COMMAND";
	public static String MEDIATORPROXY_CLIENT_ID_TAG = "CLIENT_ID";
	public static String MEDIATORPROXY_SESSION_ID_TAG = "SESSION_ID";

	public static String MEDIATORPROXY_MASTER_UPDATE_TAG = "MASTER_UPDATE";
	public static String MEDIATORPROXY_MASTER_CHECK_TAG = "MASTER_CHECK";
	public static String MEDIATORPROXY_MASTER_RESET_TAG = "MASTER_RESET";
	public static String MEDIATORPROXY_POLL_TAG = "POLL";
	public static String MEDIATORPROXY_NOTEBOARD_POLL_TAG = "OBJ_POLL";

	public static String MEDIATORPROXY_SEND_TAG = "SEND";
	public static String MEDIATORPROXY_PUBLISH_TAG = "PUB";

	public static String MEDIATORPROXY_LISTENING_NAME_TAG = "LISTENING_NAME";
	public static String MEDIATORPROXY_LISTENING_TAG = "SUBSREC";
	public static String MEDIATORPROXY_LOG_MSG_TAG = "LOG_MSG";

	public static String MEDIATORPROXY_URL = "http://" + SERVERNAME
			+ ":8080/racamediatorproxy/";

	public static String ACTIVATED_FRAME_TITLE = "NO_TITLE";

	// listens to the slave request queue (MASTER)
	private RacaConsumerThread slaveReqConsumerThread_ = null;

	// subscription to RPn COMMANDs topic (SLAVE)
	private RacaSubscriberThread commandSubscriberThread_ = null;

	// subscription for an acknowledge given to a SLAVE to join the session
	// (ALL)
	private RacaSubscriberThread slaveAckSubscriberThread_ = null;

	// subscription to MASTER request
	private RacaSubscriberThread masterReqSubscriberThread_ = null;

	// subscription to MASTER acknowledge (SLAVE)
	private RacaSubscriberThread masterAckSubscriberThread_ = null;

	// publisher for RPn COMMAND (MASTER)
	private RacaHttpPublisher commandPublisher_ = null;

	// publisher for MASTER request
	private RacaHttpPublisher masterRequestPublisher_ = null;
	
	// queues up a slave request (SLAVE)
    private RacaHttpSender slaveRequestSender_ = null;
	
	private RacaHttpSender masterSender_ = null;
	private RacaResetableListener masterCheckConsumer_ = null;
	private RacaResetableListener masterResetConsumer_ = null;
	
	public boolean isFirewalled() {
		return isFirewalled_;
	}

	private boolean isOnline() {
		return isOnline_;
	}

	public RacaNetworkProxy() {
	}

	public RacaNetworkProxy(String clientID) {
	}

	public void log() {
	}

	public void log(String logMessage) {
	}

	/*** 
	 * 		METHODS
	 ***/
	public void sendMasterRequest(String clientID) {

		boolean gotMaster = checkMasterQueue();

		if (!gotMaster) {

			// I AM THE MASTER NOW...
			ackMasterRequest(clientID);

		} else {

			// THERE IS A MASTER...SO ASK FOR THE LOCK...
			if (masterRequestPublisher_ == null)
				masterRequestPublisher_ = new RacaHttpPublisher(
						MASTER_REQ_TOPIC_NAME);

			masterRequestPublisher_.publish(MASTER_REQUEST_LOG_MSG + '|'
					+ clientID);

			System.out.println(clientID
					+ " has requested MASTER lock for SESSION with ID : "
					+ RacaCommandModule.SESSION_ID_ + '\n');

		}

	}

	public void ackMasterRequest(String clientID) {

		if (clientID.compareTo(clientID_) == 0) {

			// TODO : this should be a reconnect !
			if (isOnline() && !NO_BUS_CONTROL_) {

				// leaves the session as SLAVE
				// disconnect();
				subsMasterAck(clientID);
				subsSlaveAck(clientID);

			}

			// and now BECOMES MASTER
			log("You are now being configured as MASTER for SESSION with ID : "
					+ RacaCommandModule.SESSION_ID_ + '\n');

			RacaNetworkDialog.instance().setTitle(
					RacaNetworkDialog.TITLE + "MASTER");

			/*
			 * RPN COMMAND PUBLISH FOR MASTER
			 */
			if (commandPublisher_ == null)
				commandPublisher_ = new RacaHttpPublisher(
						MASTER_COMMAND_TOPIC_NAME);

			// MASTER SUBS to PUPIL COMMAND TOPIC (specific to MKP)
			if (commandSubscriberThread_ == null)
				commandSubscriberThread_ = new RacaSubscriberThread(
						PUPIL_COMMAND_TOPIC_NAME);

			commandSubscriberThread_.start();

			/*
			 * SLAVE REQ RECEIVE
			 */

			if (slaveReqConsumerThread_ == null) {
				slaveReqConsumerThread_ = new RacaConsumerThread(
						SLAVE_REQ_QUEUE_NAME);
				slaveReqConsumerThread_.start();
			}

			/*
			 * MASTER REQ SUBS
			 */
			if (masterReqSubscriberThread_ == null) {
				masterReqSubscriberThread_ = new RacaSubscriberThread(
						MASTER_REQ_TOPIC_NAME);
				
				// SETs THE MASTER_QUEUE EMPTY
				masterReqSubscriberThread_.start();
			}

			resetMasterQueue();
			updateMasterQueue();

			if (!NO_BUS_CONTROL_) {
				isMaster_ = true;

				isOnline_ = true;

			} else
				log(clientID
						+ " has being acknowledged as MASTER for SESSION with ID : "
						+ RacaCommandModule.SESSION_ID_ + '\n');
		}

	}

	public void subsMasterAck(String sessionID) {

		if (masterAckSubscriberThread_ == null)
			masterAckSubscriberThread_ = new RacaSubscriberThread(
					MASTER_ACK_TOPIC_NAME + sessionID);

		masterAckSubscriberThread_.start();

		System.out.println("Will be listening to MASTER ACK now...");

	}

	public void subsSlaveAck(String sessionID) {

		if (slaveAckSubscriberThread_ == null)
			slaveAckSubscriberThread_ = new RacaSubscriberThread(
					SLAVE_ACK_TOPIC_NAME + sessionID);

		slaveAckSubscriberThread_.start();
		Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.INFO,
				"Will be listening to SLAVE ACK now...");

	}

	public void updateMasterQueue() {
		/** UPDATES THE MASTER_QUEUE STATUS */
		
		MasterAttendee master = new MasterAttendee();
		
		if (!isFirewalled()) {

			// FILLs UP THE MASTER_QUEUE with proper CONTROL MSGs
			if (masterSender_ == null) {
				masterSender_ = new RacaHttpSender(MASTER_QUEUE_NAME);
			}

			// CHECK IF FIFO really ??
			masterSender_.send(MASTER_ACK_LOG_MSG + '|' + clientID_);

		} else {

			try {

				System.out.println("Will now hit MKP Mediator URL..." + '\n');

				URL rpnMediatorURL = new URL(MEDIATORPROXY_URL
						+ "rpnmasterqueueproxy" + "?"
						+ MEDIATORPROXY_REQ_ID_TAG + '='
						+ MEDIATORPROXY_MASTER_UPDATE_TAG
						+ "&"
						+ MEDIATORPROXY_CLIENT_ID_TAG
						+ '=' + master.getClientID());

				URLConnection rpnMediatorConn = rpnMediatorURL.openConnection();
				BufferedReader buffReader = new BufferedReader(
						new InputStreamReader(rpnMediatorConn.getInputStream()));

				String text;

				StringBuffer fullText = new StringBuffer();

				Boolean buffFlag = false;

				while ((text = buffReader.readLine()) != null) {

				}

			} catch (Exception exc) {

				exc.printStackTrace();

			}
		}

	}

	public void resetMasterQueue() {
		/** RESETs THE MASTER_QUEUE STATUS // NON PERSISTENT */
	
		if (masterResetConsumer_ == null)

            if (isFirewalled()) {

                System.out.println("WARN : a Http Polling context will be started...");
				masterResetConsumer_ = new RacaHttpTxtPoller(new RacaConsumer(MASTER_QUEUE_NAME,false,false),
				                      RacaHttpPoller.buildHitURL(MASTER_QUEUE_NAME));
                
            } else
                masterResetConsumer_ = new RacaConsumer(MASTER_QUEUE_NAME);
        
		// resets and releases the MASTER_QUEUE for others to listen to...
        masterResetConsumer_.reset();        
        
        masterResetConsumer_ = null;
        System.out.println("MASTER QUEUE has being reset...");		
	}

	public boolean checkMasterQueue() {
		/**
		 * REQUESTS TO BECOME MASTER WILL BE A QUICK ACCESS METHOD TO THE
		 * MASTER_QUEUE
		 */
		
		boolean gotMaster = false;

		if (masterCheckConsumer_ == null)

			if (isFirewalled()) {

				System.out.println("WARN : a Http Polling context will be started...");
				masterCheckConsumer_ = new RacaHttpTxtPoller(new RacaConsumer(
						MASTER_QUEUE_NAME, false, false),
						RacaHttpPoller.buildHitURL(MASTER_QUEUE_NAME));

			} else
				// PERSISTENT !
				masterCheckConsumer_ = new RacaConsumer(MASTER_QUEUE_NAME,
						true, false);

		gotMaster = masterCheckConsumer_.check();

		// releases the MASTER_QUEUE for others to listen to...
		masterCheckConsumer_.stopsListening();
		masterCheckConsumer_ = null;

		System.out.println("CHECK MASTER QUEUE has returned : " + gotMaster
				+ " for RPNSESSION with ID : " + RacaCommandModule.SESSION_ID_
				+ '\n');

		return gotMaster;

	}

	public void sendSlaveRequest() {
		
		// REQUESTS TO BECOME A SLAVE
        if (slaveRequestSender_ == null)
            slaveRequestSender_ = new RacaHttpSender(SLAVE_REQ_QUEUE_NAME);

	if (!NO_BUS_CONTROL_) {

	        slaveRequestSender_.send(SLAVE_REQ_LOG_MSG + '|' + clientID_);

	} else {	

		// the slave request is always accepted...
        	RacaHttpPublisher publisher = new RacaHttpPublisher(SLAVE_ACK_TOPIC_NAME);
        	publisher.publish(SLAVE_ACK_LOG_MSG + '|' + clientID_);
        	publisher.close();
	}
		
	}

	public void ackSlaveRequest(String clientID,String master_aspect,String pupilColor) {
		
		log(clientID + " has being acknowledged as SLAVE of RPNSESSION with ID : " + RacaCommandModule.SESSION_ID_ + '\n');

        if (clientID.compareTo(clientID_) == 0) {

            /*
             * RPN COMMAND PUBLISH
             */
            if (commandPublisher_ == null)
                commandPublisher_ = new RacaHttpPublisher(PUPIL_COMMAND_TOPIC_NAME);

            // SLAVE SUBS to RPN COMMAND TOPIC
            if (commandSubscriberThread_ == null)
                commandSubscriberThread_ = new RacaSubscriberThread(MASTER_COMMAND_TOPIC_NAME);

            commandSubscriberThread_.start();

            log("You are now following RPNSESSION with ID : " + RacaCommandModule.SESSION_ID_ + '\n');
            RacaNetworkDialog.instance().setTitle(RacaNetworkDialog.TITLE + "PUPIL");

		    if (aspect_.compareTo(master_aspect) != 0)
		    	JOptionPane.showMessageDialog(null,
				"Please adjust your aspect ratio to " + master_aspect, "Aspect Warning", JOptionPane.WARNING_MESSAGE);

	    RacaCommandModule.setPupilColor(pupilColor);

        }
		
	}

	public void sendCommand(String commandDesc) {

		commandPublisher_.publish(RacaStringUtil.trimURL(commandDesc));

		Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.INFO,
				"Command successfully published was : " + commandDesc);

		log("COMMAND EXECUTED : = "
				+ RacaStringUtil.extractCommandName(commandDesc));

	}

	public void sendCommand(Object obj) {
		
		commandPublisher_.publish(obj);

        Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.INFO, "Object successfully published ! ");
		
	}

}

#####
RACA_ATTENDEE
#####
package raca.client;

import java.util.List;

public abstract class RacaAttendee {

	private String clientID;	
	private RacaNetworkProxy proxy_ = null;	
	private boolean flagOnline = false;	
	private List <String> idSessions;	
	
	public boolean isFlagOnline() {
		return flagOnline;
	}

	public void setFlagOnline(boolean flagOnline) {
		this.flagOnline = flagOnline;
	}

	public String getClientID() {
		return clientID;
	}

	public RacaNetworkProxy getProxy_() {
		return proxy_;
	}
	
	public abstract void joinSession(String sessionID);
	
	public abstract void quitSession();	
	
}

#####
PUPIL_ATTENDEE
#####

package raca.client;

public class PupilAttendee extends RacaAttendee{

	public RacaNetworkProxy proxy_ = new RacaNetworkProxy();
	
	@Override
	public void joinSession(String sessionID_) {
		
		proxy_.subsSlaveAck(getClientID());
		proxy_.sendSlaveRequest();
		
		isFlagOnline();
		
	}

	@Override
	public void quitSession() {	
		
		isFlagOnline();
	}
}

#####
MASTER_ATTENDEE
#####

package raca.client;


public class MasterAttendee extends RacaAttendee{

	public RacaNetworkProxy proxy_ = new RacaNetworkProxy();
	
	@Override
	public void joinSession(String sessionID_) {
		
		proxy_.ackMasterRequest(getClientID());//Esse valor no parametro a principio segue apenas para satisfazer um valor esperado
		
		proxy_.subsMasterAck(getClientID());
		
		proxy_.sendMasterRequest(getClientID());
		
		isFlagOnline();
	}

	@Override
	public void quitSession() {
		
		isFlagOnline();
	}
}

#####
RACA_COMMAND_MODULE
#####

ackage raca.client;

public class RacaCommandModule {

	public static String SESSION_ID_ = "8888";
	private static RacaCommandModule instance_ = null;
	
	public RacaCommandModule(){
		
	}
	
	public static RacaCommandModule instance(){
		
		if(instance_ == null){
			
			instance_ = new RacaCommandModule();
		}
		
		return instance_;
	}
	
	
	public static void setPupilColor(String color) {}
	
}


#####
RACA_CONSUMER
#####

package raca.client;

public class RacaConsumer implements RacaResetableListener {

	public RacaConsumer(String queueName) {
        this(queueName,false,false);
    }

    public RacaConsumer(String queueName,boolean persistent) {
        this(queueName,persistent,false);
    }

    public RacaConsumer(String queueName,boolean persistent,boolean isLocal) {}

	@Override
	public void connect() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void parseMessageText(String text) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void parseMessageObject(Object obj) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String listeningName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void startsListening() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void stopsListening() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void reset() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean check() {
		// TODO Auto-generated method stub
		return false;
	}
}

#####
RACA_CONSUMER_THREAD
#####

package raca.client;

public class RacaConsumerThread extends Thread{

	private RacaMessageListener consumer_ = null;


    public RacaConsumerThread(String queueName) {
        //this(queueName,false);
    }
	
}


#####
RACA_HTTP_POLLER
#####

package raca.client;

public class RacaHttpPoller {

	private static RacaHttpPoller instance_ = null;
	
	public static String buildHitURL(String hitTarget){
		
		return hitTarget;
	}
	
	public static String buildHitURL(String mode,String hitTarget){
		
		return "";
	}
	
	public static RacaHttpPoller instance(){
		
		if(instance_ == null){
			
			instance_ = new RacaHttpPoller();
		}
		
		return instance_;
	}
}

#####
RACA_HTTP_PUBLISHER
#####

package raca.client;

public class RacaHttpPublisher {

	public RacaHttpPublisher(){	}
	
	public RacaHttpPublisher(String topicName){		
		
	}
	
	public void publish(String msg) {
		
	}
	public void publish(Object obj) {
		
	}	
	
	public void close(){
		
	}	
}


#####
RACA_HTTP_SENDER
#####

package raca.client;

public class RacaHttpSender {

	
	private String hitURL_ = null;
    private String queueName_ = null;

    public RacaHttpSender(String queueName) {

        queueName_ = queueName.toString();
		hitURL_ = RacaHttpPoller.buildHitURL("SEND",queueName.toString());
    
    }

    public void send(String msg) {}	
	
}


#####
RACA_HTTP_TEXT_POLLER
#####

package raca.client;

public class RacaHttpTxtPoller implements RacaResetableListener{

	public RacaHttpTxtPoller(){}
	
	public RacaHttpTxtPoller( Object messageParser,String hitURL){
		
	}

	@Override
	public void connect() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void parseMessageText(String text) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void parseMessageObject(Object obj) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String listeningName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void startsListening() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void stopsListening() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void reset() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean check() {
		// TODO Auto-generated method stub
		return false;
	}
	
	
}

#####
RACA_MESSAGE_LISTENER
#####

package raca.client;

public interface RacaMessageListener {

	void connect();
    void parseMessageText(String text);
    void parseMessageObject(Object obj);
    String listeningName();
    void startsListening();
    void stopsListening();
	
}



#####
RACA_NETWORK_DIALOG
#####

package raca.client;

import javax.swing.JDialog;

public class RacaNetworkDialog extends JDialog { //COMENTAR O *implements PropertyChangeListener*
	
	private static RacaNetworkDialog instance_= null;
	public static String TITLE = "RPn Network Control - ";
	
	public static RacaNetworkDialog instance(){
		
		if(instance_ == null){
			instance_ = new RacaNetworkDialog();
		}
		
		return instance_;
	}
}

#####
RACA_RESETABLE_LISTENER
#####

package raca.client;

public interface RacaResetableListener extends RacaMessageListener{

	void reset();
    boolean check();
	
}

#####
RACA_SUBSCRIER_THREAD
#####

package raca.client;

public class RacaSubscriberThread extends Thread{
	
	
	public RacaSubscriberThread(String topicName){
		
	}	
	
	public void run(){
		
	}

}
